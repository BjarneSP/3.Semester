//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTest.testServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="testServiceRef.IBikeService")]
    public interface IBikeService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateBicycle", ReplyAction="http://tempuri.org/IBikeService/CreateBicycleResponse")]
        void CreateBicycle(ModelLayer.Bicycle b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateBicycle", ReplyAction="http://tempuri.org/IBikeService/CreateBicycleResponse")]
        System.Threading.Tasks.Task CreateBicycleAsync(ModelLayer.Bicycle b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBikesByUser", ReplyAction="http://tempuri.org/IBikeService/GetBikesByUserResponse")]
        ModelLayer.Bicycle[] GetBikesByUser(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBikesByUser", ReplyAction="http://tempuri.org/IBikeService/GetBikesByUserResponse")]
        System.Threading.Tasks.Task<ModelLayer.Bicycle[]> GetBikesByUserAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBrands", ReplyAction="http://tempuri.org/IBikeService/GetBrandsResponse")]
        ModelLayer.Brand[] GetBrands();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBrands", ReplyAction="http://tempuri.org/IBikeService/GetBrandsResponse")]
        System.Threading.Tasks.Task<ModelLayer.Brand[]> GetBrandsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetWheelSizes", ReplyAction="http://tempuri.org/IBikeService/GetWheelSizesResponse")]
        ModelLayer.Wheel[] GetWheelSizes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetWheelSizes", ReplyAction="http://tempuri.org/IBikeService/GetWheelSizesResponse")]
        System.Threading.Tasks.Task<ModelLayer.Wheel[]> GetWheelSizesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetFrameSizes", ReplyAction="http://tempuri.org/IBikeService/GetFrameSizesResponse")]
        ModelLayer.Frame[] GetFrameSizes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetFrameSizes", ReplyAction="http://tempuri.org/IBikeService/GetFrameSizesResponse")]
        System.Threading.Tasks.Task<ModelLayer.Frame[]> GetFrameSizesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetTypes", ReplyAction="http://tempuri.org/IBikeService/GetTypesResponse")]
        ModelLayer.BicycleType[] GetTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetTypes", ReplyAction="http://tempuri.org/IBikeService/GetTypesResponse")]
        System.Threading.Tasks.Task<ModelLayer.BicycleType[]> GetTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBikeByYear", ReplyAction="http://tempuri.org/IBikeService/GetBikeByYearResponse")]
        ModelLayer.Bicycle GetBikeByYear(string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBikeByYear", ReplyAction="http://tempuri.org/IBikeService/GetBikeByYearResponse")]
        System.Threading.Tasks.Task<ModelLayer.Bicycle> GetBikeByYearAsync(string year);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveBicycle", ReplyAction="http://tempuri.org/IBikeService/RemoveBicycleResponse")]
        void RemoveBicycle(int bicycleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveBicycle", ReplyAction="http://tempuri.org/IBikeService/RemoveBicycleResponse")]
        System.Threading.Tasks.Task RemoveBicycleAsync(int bicycleId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateAd", ReplyAction="http://tempuri.org/IBikeService/CreateAdResponse")]
        void CreateAd(string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateAd", ReplyAction="http://tempuri.org/IBikeService/CreateAdResponse")]
        System.Threading.Tasks.Task CreateAdAsync(string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/ModifyAd", ReplyAction="http://tempuri.org/IBikeService/ModifyAdResponse")]
        void ModifyAd(int id, string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/ModifyAd", ReplyAction="http://tempuri.org/IBikeService/ModifyAdResponse")]
        System.Threading.Tasks.Task ModifyAdAsync(int id, string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveAd", ReplyAction="http://tempuri.org/IBikeService/RemoveAdResponse")]
        void RemoveAd(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveAd", ReplyAction="http://tempuri.org/IBikeService/RemoveAdResponse")]
        System.Threading.Tasks.Task RemoveAdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAdByTitle", ReplyAction="http://tempuri.org/IBikeService/GetAdByTitleResponse")]
        ModelLayer.Advertisement GetAdByTitle(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAdByTitle", ReplyAction="http://tempuri.org/IBikeService/GetAdByTitleResponse")]
        System.Threading.Tasks.Task<ModelLayer.Advertisement> GetAdByTitleAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAdvertisementsByUser", ReplyAction="http://tempuri.org/IBikeService/GetAdvertisementsByUserResponse")]
        ModelLayer.Advertisement[] GetAdvertisementsByUser(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAdvertisementsByUser", ReplyAction="http://tempuri.org/IBikeService/GetAdvertisementsByUserResponse")]
        System.Threading.Tasks.Task<ModelLayer.Advertisement[]> GetAdvertisementsByUserAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/FindAdById", ReplyAction="http://tempuri.org/IBikeService/FindAdByIdResponse")]
        ModelLayer.Advertisement FindAdById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/FindAdById", ReplyAction="http://tempuri.org/IBikeService/FindAdByIdResponse")]
        System.Threading.Tasks.Task<ModelLayer.Advertisement> FindAdByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAllAds", ReplyAction="http://tempuri.org/IBikeService/GetAllAdsResponse")]
        ModelLayer.Advertisement[] GetAllAds();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAllAds", ReplyAction="http://tempuri.org/IBikeService/GetAllAdsResponse")]
        System.Threading.Tasks.Task<ModelLayer.Advertisement[]> GetAllAdsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAvailableAds", ReplyAction="http://tempuri.org/IBikeService/GetAvailableAdsResponse")]
        ModelLayer.Advertisement[] GetAvailableAds(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAvailableAds", ReplyAction="http://tempuri.org/IBikeService/GetAvailableAdsResponse")]
        System.Threading.Tasks.Task<ModelLayer.Advertisement[]> GetAvailableAdsAsync(System.DateTime start, System.DateTime end);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateUser", ReplyAction="http://tempuri.org/IBikeService/CreateUserResponse")]
        void CreateUser(string email, string pword, string name, string phone, string address, string zipcode, string age);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateUser", ReplyAction="http://tempuri.org/IBikeService/CreateUserResponse")]
        System.Threading.Tasks.Task CreateUserAsync(string email, string pword, string name, string phone, string address, string zipcode, string age);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/ModifyUser", ReplyAction="http://tempuri.org/IBikeService/ModifyUserResponse")]
        void ModifyUser(int id, string email, string name, string phone, string address, string zipcode, string age);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/ModifyUser", ReplyAction="http://tempuri.org/IBikeService/ModifyUserResponse")]
        System.Threading.Tasks.Task ModifyUserAsync(int id, string email, string name, string phone, string address, string zipcode, string age);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveUser", ReplyAction="http://tempuri.org/IBikeService/RemoveUserResponse")]
        void RemoveUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveUser", ReplyAction="http://tempuri.org/IBikeService/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAllUsers", ReplyAction="http://tempuri.org/IBikeService/GetAllUsersResponse")]
        ModelLayer.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetAllUsers", ReplyAction="http://tempuri.org/IBikeService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<ModelLayer.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetUser", ReplyAction="http://tempuri.org/IBikeService/GetUserResponse")]
        ModelLayer.User GetUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetUser", ReplyAction="http://tempuri.org/IBikeService/GetUserResponse")]
        System.Threading.Tasks.Task<ModelLayer.User> GetUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetUserByEmail", ReplyAction="http://tempuri.org/IBikeService/GetUserByEmailResponse")]
        ModelLayer.User GetUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetUserByEmail", ReplyAction="http://tempuri.org/IBikeService/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<ModelLayer.User> GetUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/LoginUser", ReplyAction="http://tempuri.org/IBikeService/LoginUserResponse")]
        ModelLayer.User LoginUser(string email, string pword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/LoginUser", ReplyAction="http://tempuri.org/IBikeService/LoginUserResponse")]
        System.Threading.Tasks.Task<ModelLayer.User> LoginUserAsync(string email, string pword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateBooking", ReplyAction="http://tempuri.org/IBikeService/CreateBookingResponse")]
        void CreateBooking(ModelLayer.Booking b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CreateBooking", ReplyAction="http://tempuri.org/IBikeService/CreateBookingResponse")]
        System.Threading.Tasks.Task CreateBookingAsync(ModelLayer.Booking b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveBooking", ReplyAction="http://tempuri.org/IBikeService/RemoveBookingResponse")]
        void RemoveBooking(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/RemoveBooking", ReplyAction="http://tempuri.org/IBikeService/RemoveBookingResponse")]
        System.Threading.Tasks.Task RemoveBookingAsync(int bookingId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBookingsByUser", ReplyAction="http://tempuri.org/IBikeService/GetBookingsByUserResponse")]
        ModelLayer.Booking[] GetBookingsByUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBookingsByUser", ReplyAction="http://tempuri.org/IBikeService/GetBookingsByUserResponse")]
        System.Threading.Tasks.Task<ModelLayer.Booking[]> GetBookingsByUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBookingByPrice", ReplyAction="http://tempuri.org/IBikeService/GetBookingByPriceResponse")]
        ModelLayer.Booking GetBookingByPrice(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/GetBookingByPrice", ReplyAction="http://tempuri.org/IBikeService/GetBookingByPriceResponse")]
        System.Threading.Tasks.Task<ModelLayer.Booking> GetBookingByPriceAsync(double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CalcPrice", ReplyAction="http://tempuri.org/IBikeService/CalcPriceResponse")]
        double CalcPrice(System.DateTime startDate, System.DateTime endDate, double price);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBikeService/CalcPrice", ReplyAction="http://tempuri.org/IBikeService/CalcPriceResponse")]
        System.Threading.Tasks.Task<double> CalcPriceAsync(System.DateTime startDate, System.DateTime endDate, double price);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBikeServiceChannel : UnitTest.testServiceRef.IBikeService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BikeServiceClient : System.ServiceModel.ClientBase<UnitTest.testServiceRef.IBikeService>, UnitTest.testServiceRef.IBikeService {
        
        public BikeServiceClient() {
        }
        
        public BikeServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BikeServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BikeServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BikeServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateBicycle(ModelLayer.Bicycle b) {
            base.Channel.CreateBicycle(b);
        }
        
        public System.Threading.Tasks.Task CreateBicycleAsync(ModelLayer.Bicycle b) {
            return base.Channel.CreateBicycleAsync(b);
        }
        
        public ModelLayer.Bicycle[] GetBikesByUser(int Id) {
            return base.Channel.GetBikesByUser(Id);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Bicycle[]> GetBikesByUserAsync(int Id) {
            return base.Channel.GetBikesByUserAsync(Id);
        }
        
        public ModelLayer.Brand[] GetBrands() {
            return base.Channel.GetBrands();
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Brand[]> GetBrandsAsync() {
            return base.Channel.GetBrandsAsync();
        }
        
        public ModelLayer.Wheel[] GetWheelSizes() {
            return base.Channel.GetWheelSizes();
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Wheel[]> GetWheelSizesAsync() {
            return base.Channel.GetWheelSizesAsync();
        }
        
        public ModelLayer.Frame[] GetFrameSizes() {
            return base.Channel.GetFrameSizes();
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Frame[]> GetFrameSizesAsync() {
            return base.Channel.GetFrameSizesAsync();
        }
        
        public ModelLayer.BicycleType[] GetTypes() {
            return base.Channel.GetTypes();
        }
        
        public System.Threading.Tasks.Task<ModelLayer.BicycleType[]> GetTypesAsync() {
            return base.Channel.GetTypesAsync();
        }
        
        public ModelLayer.Bicycle GetBikeByYear(string year) {
            return base.Channel.GetBikeByYear(year);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Bicycle> GetBikeByYearAsync(string year) {
            return base.Channel.GetBikeByYearAsync(year);
        }
        
        public void RemoveBicycle(int bicycleId) {
            base.Channel.RemoveBicycle(bicycleId);
        }
        
        public System.Threading.Tasks.Task RemoveBicycleAsync(int bicycleId) {
            return base.Channel.RemoveBicycleAsync(bicycleId);
        }
        
        public void CreateAd(string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId) {
            base.Channel.CreateAd(title, description, price, startDate, endDate, bikeId, userId);
        }
        
        public System.Threading.Tasks.Task CreateAdAsync(string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId) {
            return base.Channel.CreateAdAsync(title, description, price, startDate, endDate, bikeId, userId);
        }
        
        public void ModifyAd(int id, string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId) {
            base.Channel.ModifyAd(id, title, description, price, startDate, endDate, bikeId, userId);
        }
        
        public System.Threading.Tasks.Task ModifyAdAsync(int id, string title, string description, double price, System.DateTime startDate, System.DateTime endDate, System.Nullable<int> bikeId, System.Nullable<int> userId) {
            return base.Channel.ModifyAdAsync(id, title, description, price, startDate, endDate, bikeId, userId);
        }
        
        public void RemoveAd(int id) {
            base.Channel.RemoveAd(id);
        }
        
        public System.Threading.Tasks.Task RemoveAdAsync(int id) {
            return base.Channel.RemoveAdAsync(id);
        }
        
        public ModelLayer.Advertisement GetAdByTitle(string title) {
            return base.Channel.GetAdByTitle(title);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Advertisement> GetAdByTitleAsync(string title) {
            return base.Channel.GetAdByTitleAsync(title);
        }
        
        public ModelLayer.Advertisement[] GetAdvertisementsByUser(int Id) {
            return base.Channel.GetAdvertisementsByUser(Id);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Advertisement[]> GetAdvertisementsByUserAsync(int Id) {
            return base.Channel.GetAdvertisementsByUserAsync(Id);
        }
        
        public ModelLayer.Advertisement FindAdById(int id) {
            return base.Channel.FindAdById(id);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Advertisement> FindAdByIdAsync(int id) {
            return base.Channel.FindAdByIdAsync(id);
        }
        
        public ModelLayer.Advertisement[] GetAllAds() {
            return base.Channel.GetAllAds();
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Advertisement[]> GetAllAdsAsync() {
            return base.Channel.GetAllAdsAsync();
        }
        
        public ModelLayer.Advertisement[] GetAvailableAds(System.DateTime start, System.DateTime end) {
            return base.Channel.GetAvailableAds(start, end);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Advertisement[]> GetAvailableAdsAsync(System.DateTime start, System.DateTime end) {
            return base.Channel.GetAvailableAdsAsync(start, end);
        }
        
        public void CreateUser(string email, string pword, string name, string phone, string address, string zipcode, string age) {
            base.Channel.CreateUser(email, pword, name, phone, address, zipcode, age);
        }
        
        public System.Threading.Tasks.Task CreateUserAsync(string email, string pword, string name, string phone, string address, string zipcode, string age) {
            return base.Channel.CreateUserAsync(email, pword, name, phone, address, zipcode, age);
        }
        
        public void ModifyUser(int id, string email, string name, string phone, string address, string zipcode, string age) {
            base.Channel.ModifyUser(id, email, name, phone, address, zipcode, age);
        }
        
        public System.Threading.Tasks.Task ModifyUserAsync(int id, string email, string name, string phone, string address, string zipcode, string age) {
            return base.Channel.ModifyUserAsync(id, email, name, phone, address, zipcode, age);
        }
        
        public void RemoveUser(int id) {
            base.Channel.RemoveUser(id);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(int id) {
            return base.Channel.RemoveUserAsync(id);
        }
        
        public ModelLayer.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<ModelLayer.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public ModelLayer.User GetUser(int id) {
            return base.Channel.GetUser(id);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.User> GetUserAsync(int id) {
            return base.Channel.GetUserAsync(id);
        }
        
        public ModelLayer.User GetUserByEmail(string email) {
            return base.Channel.GetUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.User> GetUserByEmailAsync(string email) {
            return base.Channel.GetUserByEmailAsync(email);
        }
        
        public ModelLayer.User LoginUser(string email, string pword) {
            return base.Channel.LoginUser(email, pword);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.User> LoginUserAsync(string email, string pword) {
            return base.Channel.LoginUserAsync(email, pword);
        }
        
        public void CreateBooking(ModelLayer.Booking b) {
            base.Channel.CreateBooking(b);
        }
        
        public System.Threading.Tasks.Task CreateBookingAsync(ModelLayer.Booking b) {
            return base.Channel.CreateBookingAsync(b);
        }
        
        public void RemoveBooking(int bookingId) {
            base.Channel.RemoveBooking(bookingId);
        }
        
        public System.Threading.Tasks.Task RemoveBookingAsync(int bookingId) {
            return base.Channel.RemoveBookingAsync(bookingId);
        }
        
        public ModelLayer.Booking[] GetBookingsByUser(int userId) {
            return base.Channel.GetBookingsByUser(userId);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Booking[]> GetBookingsByUserAsync(int userId) {
            return base.Channel.GetBookingsByUserAsync(userId);
        }
        
        public ModelLayer.Booking GetBookingByPrice(double price) {
            return base.Channel.GetBookingByPrice(price);
        }
        
        public System.Threading.Tasks.Task<ModelLayer.Booking> GetBookingByPriceAsync(double price) {
            return base.Channel.GetBookingByPriceAsync(price);
        }
        
        public double CalcPrice(System.DateTime startDate, System.DateTime endDate, double price) {
            return base.Channel.CalcPrice(startDate, endDate, price);
        }
        
        public System.Threading.Tasks.Task<double> CalcPriceAsync(System.DateTime startDate, System.DateTime endDate, double price) {
            return base.Channel.CalcPriceAsync(startDate, endDate, price);
        }
    }
}
